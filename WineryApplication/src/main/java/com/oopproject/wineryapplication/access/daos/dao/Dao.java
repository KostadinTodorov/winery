package com.oopproject.wineryapplication.access.daos.dao;

import com.oopproject.wineryapplication.access.entities.entity.Entity;
import org.hibernate.Session;

import java.util.List;

/**
 * Общ интерфейс за Обектен Достъп до Данни (DAO) за CRUD операции.
 *
 * <p>Този интерфейс предоставя CRUD методи за работа с обектни данни. Той е предназначен да бъде имплементиран от конкретни DAO
 * класове, специфични за даден {@code Entity}.</p>
 * <p>Генеричният клас {@code <T>} трябва да разширява {@code abstract class Entity}. Той представя база данни, чиито данни са свързани с клас на обектни данни, разширяващ {@code Entity}.</p>
 * <ul>
 *     DAO {@code interface} предоставя методи за:
 *     <li>{@code T get{int id}} и {@code List<T> getAll()} се използват за извличане на информация от таблицата с данни.</li>
 *     <li>За промяна на данните в източника съществуват методите {@code boolean add(T t)} и {@code boolean update(int id, T t)} за добавяне и актуализиране на редове, съответстващи на даден {@code T t} обект. Методът {@code T insert(T t)} служи както за актуализиране, така и за добавяне.</li>
 *     <li>За изтриване на редове - {@code boolean delete(int id)}</li>
 * </ul>
 * <p>Осигурява договор за създаване на сесия към определен източник на данни.</p>
 * @param <T> типът на обекта, който този DAO ще обработва
 */
public interface Dao<T extends Entity> {

    /**
     * Извлича конкретен обект от генеричния тип {@code T} по неговото ID.
     *
     * @param id {@code int} ID на обекта, който методът извлича от източника на данни. Представлява първичния ключ на ред. Първичният ключ трябва да бъде от тип int.
     * @return инстанция на {@code T} обект със зададеното ID или {@code null}, ако няма ред с първичен ключ, равен на {@code id}.
     */
    public T get(int id);

    /**
     * Извлича всички обекти, съответстващи на редовете в таблицата.
     *
     * @return {@code List<T>} със всички обекти
     */
    public List<T> getAll();

    /**
     * Добавя нов обект към източника на данни. Обектът съответства на нов ред в таблицата.
     *
     * @param entity обектът, който ще бъде добавен. {@code T entity} може да има ID, представено в източника на данни, но {@code entity.getId()} ще бъде игнорирано. Базата данни ще генерира ID за реда.
     * @return {@code true}, ако обектът е добавен успешно, {@code false} в противен случай
     */
    public boolean add(T entity);

    /**
     * Вмъква нов обект в източника на данни и връща вмъкнатия обект.
     *
     * <p>Този метод може да се използва както за добавяне, така и за актуализиране на обект.</p>
     *
     * @param entity обектът, който ще бъде вмъкнат. {@code T entity} се вмъква в таблицата с първичен ключ, съответстващ на ID на {@code T entity}. Ако такова ID не съществува в представената таблица или ID на обекта е {@code null}, той се добавя като нов ред.
     * @return вмъкнатият обект, потенциално модифициран (например с генерирано ID)
     */
    public T insert(T entity);

    /**
     * Актуализира съществуващ обект в източника на данни по неговото ID.
     *
     * @param id ID на обекта, който ще бъде актуализиран
     * @param entity новият обект, който ще бъде зададен за реда с първичен ключ, равен на {@code id}. {@code T entity} може да има ID, представено в източника на данни, но {@code entity.getId()} ще бъде игнорирано. Информацията ще бъде актуализирана според стойността на {@code int id}.
     * @return {@code true}, ако обектът е актуализиран успешно, {@code false} в противен случай
     */
    public boolean update(int id, T entity);

    /**
     * Изтрива обект по неговото ID.
     *
     * @param id ID на обекта, който ще бъде изтрит
     * @return {@code true}, ако обектът е изтрит успешно, {@code false} в противен случай
     */
    public boolean delete(int id);

    /**
     * Създава сесия за взаимодействие с източника на данни.
     *
     * <p>Този метод се използва за управление на транзакции или поддържане на постоянна връзка
     * с източника на данни.</p>
     *
     * @return {@code Session} обект за операции с данни
     * @throws RuntimeException ако не може да бъде създадена сесия
     */
    public Session createSession() throws RuntimeException;
}
