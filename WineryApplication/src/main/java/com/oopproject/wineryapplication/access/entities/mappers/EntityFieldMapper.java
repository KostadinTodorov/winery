package com.oopproject.wineryapplication.access.entities.mappers;

import javafx.scene.Node;

import java.lang.reflect.Field;
import java.util.Map;

/**
 * Предоставя съпоставяне между полетата на entity-то и съответните UI възли.
 *
 * Този интерфейс дефинира договор за класове, които са отговорни за създаването
 * и управлението на връзка между полетата на entity-то и специфични UI компоненти,
 * позволявайки безпроблемно взаимодействие между моделите на данни и потребителския интерфейс.
 *
 * Имплементациите на този интерфейс могат да използват рефлексия, за да инспектират полетата
 * на клас entity, динамично да ги свързват със съответните UI компоненти
 * и да връщат съпоставянето като {@code Map<Field, Node>}.
 */
public interface EntityFieldMapper {
    /**
     * Генерира карта, която свързва полетата на текущия клас entity със съответните UI възли.
     * Типът на генерирания възел зависи от типа на полето:
     * - За полета от тип {@code Boolean} се създава {@code CheckBox}.
     * - За полета от тип {@code LocalDate} се създава {@code DatePicker}.
     * - За полета, които се отнасят до други entity-та, се създава {@code ComboBox}, съдържащ entity-тата.
     * - За всички други типове полета се създава {@code TextField}, като името на типа се използва като текст на подкана.
     *
     * Методът използва рефлексия, за да извлече всички декларирани полета на класа entity, определя типа
     * на всяко поле и динамично създава и съпоставя подходящия UI възел.
     *
     * @return карта, където ключовете са полетата на класа entity, а стойностите са съответните UI възли.
     */
    public Map<Field, Node> getFieldNodeMap();
}